#!/usr/bin/python

import os
from Tkinter import *
from tkColorChooser import askcolor              
import copy
import numpy as np

mncDir = "/home/jeremy/graphics/mnc"
ribFile = mncDir + "/mnc.rib"
tifRen = mncDir + "/img.tif"
gifRen = mncDir + "/img.gif"
parmsFile = mncDir + "/parms"

def loadParmDic():
	dic = {}
	f = open(parmsFile, 'r')
	for line in f.readlines():
		k,v = line.split(" ")
		dic[k] = float(v)
	f.close()
	return dic

#writeRib()
class renWin():
	def saveParmDic(self):
		print "in saveParmDic, self.entDic:", self.entDic
		f = open(parmsFile, 'w')
		for k in self.parmDic.keys():
			print "k:", k
			ent = self.entDic[k]
			print "ent:", ent
			v = ent.get()
			self.parmDic[k] = v
			#self.entDic[k] = v
			f.write(k + " " + str(v) + "\n")
		f.close()

	def writeRib(self):
		print "\nin writeRib, self.entDic:", self.entDic
		self.saveParmDic()
		print "AAA self.entDic:", self.entDic
		Gsc = 1
		sc = 3
		rib = 'Display "' + tifRen + '" "file" "rgb"'
		rib += """
			Shutter 0.2 0.8 

			PixelSamples 3 3
			PixelFilter "sinc" 2 2
			Format """ + str(210*sc) + " " + str(297*sc) + """ 1
			Projection "orthographic"



			WorldBegin
			Translate 0 0 3
			Scale """ + str(Gsc) + " " + str(Gsc) + " " + str(Gsc) + """
			Rotate """ + str(90) + """ 0 0 1
		"""
		nStuds = int(float(self.parmDic["nStuds"]))
		nSpokes = int(float(self.parmDic["nSpokes"]))
		wid = .015
		gSc = 1
		for i in range(nSpokes):
			rib += "Rotate " + str(360.0/nSpokes) + " 0 0 1"
			cSc = 1
			undim = .5
			clrSc = 1
			for j in range(nStuds):
				dim = 1-undim
				dim *= .5
				dim = pow(dim, .5)
				rib += "Rotate " + str(360.0/(nSpokes*2)) + " 0 0 1"
				tr = (j + 1 )*cSc
				cSc *= .7
				c1 = str(dim)
				c2 = str((1-clrSc*cSc)*dim)
				c3 = str(clrSc*cSc*dim)
				rib += """
				#Color """ + str(clrSc*cSc*dim) + """ """ + str((1-clrSc*cSc)*dim) + " " + str(dim) + """
				#Color """ + c1  + " " + c2 + " " + c3 + """
				Color """ + c3  + " " + c1 + " " + c2 + """
				TransformBegin Translate """ + str(tr) + """ 0 0
				Scale """ + str(gSc*cSc) + " " + str(gSc*cSc) + " " + str(gSc*cSc) + """
				Torus 1 """ + str(wid/cSc) + """ 60 90 360 
				TransformEnd
				"""
				clrSc *= .5
				undim *= .5

		rib += """
			Translate 0 0 1
			Color .05 .05 .05
			Disk 0 20 360
			WorldEnd
			"""

		f = open(ribFile, 'w')
		f.write(rib)
		f.close()

#cmd = "renderdl -progress -stats3 -statsfile /tmp/renOut " + ribFile + "\n"
		cmd = "renderdl " + ribFile + "\n"
		print "executing", cmd
		os.system(cmd)

		cmd = "convert " + tifRen + " " + gifRen
		print "Executing " + cmd + "..."
		os.system(cmd)
		print "BBBBB self.entDic:", self.entDic
		self.updateUi()
		print "end writeRib, self.entDic:", self.entDic
		print

	def updateUi(self):
		print "in updateUi, self.entDic:", self.entDic
		self.photo.configure(file=gifRen);
		self.imgBut.configure(image=self.photo)
	
	def test(self):
		print "weeeeeeeeeeeeeeeeee"

	def __init__(self):
		self.parmDic = loadParmDic()
		self.entDic = {}
		self.root = Tk()
		self.root.bind('<Escape>', lambda e: self.root.destroy())
		self.photo = PhotoImage(file=gifRen);
		#self.center_window(1300, 800)
		self.frameMaster = Frame(self.root)
		self.frameMaster.grid()
		self.imgBut = Button(self.frameMaster, image=self.photo)
		frameControls = Frame(self.frameMaster)
		frameControls.grid(row=0, column=0)
		#but = Button(frameControls, text="RENDER APPROX", command=lambda:writeRib())
		#but.grid(row=0, column=0)

		row = 1
		for k,v in self.parmDic.items():
			lab = Label(frameControls, text=k)
			lab.grid(row=row, column=0)
			ent = Entry(frameControls, validate=ALL, validatecommand=self.test)
			#ent = Entry(frameControls)
			ent.insert(0, str(v))
			ent.grid(row=row, column=1)
			print "k:", k, "; ent: ", ent
			self.entDic[k] = ent
			row +=1

		print "before writeRib, entDic:", self.entDic
		self.imgBut.configure(command=lambda:self.writeRib())
		self.imgBut.grid(row=0, column=1)
		
		#for v in self.entDic.values():
		#	v.configure(validate=ALL, validatecommand=self.test)
		mainloop() 

renWin()
